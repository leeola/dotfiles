# Kakoune config for: Kakoune v2019.07.01

# include plugin manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"

#
# ## plugins
#

# Disabled while i setup Nix
# # basic theme
# plug "andreyorst/base16-gruvbox.kak" theme config %{
#   colorscheme base16-gruvbox-dark-medium
# }

# commit from 2021/08/02, no compat reason.
plug "andreyorst/fzf.kak" commit "124c3a2" demand "fzf-file" %{
  set-option global fzf_file_command 'rg'
}

plug "ul/kak-lsp" do %{
  cargo build --release --locked
  cargo install --force --path . # `--path .' is needed by recent versions of cargo
} config %{
  set-option global lsp_diagnostic_line_error_sign '║'
  set-option global lsp_diagnostic_line_warning_sign '┊'

  define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
  define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
  define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

  define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

  hook global WinSetOption filetype=(rust) %{
    set-option window lsp_server_configuration rust.clippy_preference="on"
  }

  hook global WinSetOption filetype=rust %{
    lsp-enable-window

    hook window BufWritePre .* %{
      lsp-formatting-sync
    }

    # Disabled until i can figure out how to either toggle inlays or they fix
    # wrapping.
    #
    # hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    # hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    # hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    # hook -once -always window WinSetOption filetype=.* %{
    #   remove-hooks window rust-inlay-hints
    # }


    set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /home/lee/kak-lsp.log"
  }

  hook global KakEnd .* lsp-exit
}


# find implements my desire for CtrlP-like fuzzy finder in kakoune.
# def find -params 1 -shell-candidates %{ find . -type f -not -path "./vendor/*" -not -path "./.git/*" -not -path "./_stores/*" -not -path "./node_modules/*" } %{ edit %arg{1} }

# This binding replicates my CtrlP usage for the above command.
# map global user p ":find "

# Set relative line numbers whenever a window is opened.
hook global KakBegin .* %{addhl global/ number-lines -hlcursor -separator ' ' -relative}

# Set the default tab width
set global tabstop 2
# Make tab 2 space chars.
set global indentwidth 2

# Set a padding at the bottom of the window so i can see upcoming lines.
#
# Note that columns are also set. 3 lines, 3 columns.
set global scrolloff 3,3

# Make tab use space characters instead of tab char.
#
# Note that this just changes the tab key to indent, not specifically
# insert two spaces. Unindent is also bound.
hook global InsertChar \t %{
  exec -draft -itersel h@
}
hook global InsertKey <backspace> %{ try %{
  exec -draft hGh<a-k>\A\h+\Z<ret>gihyp<lt>
}}


# Enable automatic modelines for all files. Eg, to adjust settings per file.
hook global BufOpenFile .* %{modeline-parse}


# NOTE(leeola): The following window hooks seemingly need to be within a
# WinCreate hook. This may not be correct, or there may be a better way to
# implement this such as maybe making the window scope a global? Not sure.
hook global WinCreate .* %{
  # Highlight trailing whitespace
  addhl window/ regex '\h+$' 0:default,red

  hook window InsertCompletionShow .* %{
  	map window insert <tab> <c-n>
  	map window insert <s-tab> <c-p>
  }

  hook window InsertCompletionHide .* %{
  	unmap window insert <tab> <c-n>
  	unmap window insert <s-tab> <c-p>
  }
}

# Source custom additions, like custom user.
source ~/.config/kak/cuser.kak
# source ~/.config/kak/code-err.kak
# source ~/.config/kak/typescriptreact.kak
# Source my custom language specific configs.
# source ~/.config/kak/go.kak
# source ~/.config/kak/gotools-ext.kak

# my experimental go plugin
#evaluate-commands %sh{ gokakoune-plugins }
#evaluate-commands %sh{ gokakoune-examples }
#evaluate-commands %sh{ gokakoune-tabnine }

# Bind the custom user mode entry point to space,  my normal leader
# the old space to , which clears selection.
map global normal , <space>
map global normal <space> :cuser-mode<ret>

# hack to fix scrolling related to an issue:
#
# see: https://github.com/mawww/kakoune/issues/2651
#set global ui_options ncurses_wheel_down_button=64

# enable kak-lsp. This is installed via brew manually,
# not with plug.kak.
#eval %sh{kak-lsp --kakoune -s $kak_session}
#lsp-enable

#set global lsp_tab_size 2

# hook global WinSetOption filetype=(typescript|typescriptreact) %{
#   hook window BufWritePre .* lsp-formatting-sync
# }

# Rust specific config.
hook global WinSetOption filetype=(rust) %{
    # Set the default tab width
    set buffer tabstop 4
    # Make tab 4 space chars.
    set buffer indentwidth 4
}
