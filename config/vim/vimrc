set nocompatible                    " be iMproved
filetype off                        " required!

" Vundle Setup
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" My Bundles
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'guns/xterm-color-table.vim'

" Syntax Highlighting Bundles
Bundle 'scrooloose/syntastic'
Bundle 'kchmck/vim-coffee-script'
Bundle 'digitaltoad/vim-jade'
Bundle 'groenewege/vim-less'
Bundle 'jnwhiteh/vim-golang'

" Colorscheme Plugins
"Bundle 'vim-scripts/ScrollColors'  " Deprecated
"Bundle 'flazz/vim-colorschemes'    " Deprecated
Bundle 'altercation/vim-colors-solarized'

filetype plugin indent on           " Vundle Related Magic!

" Powerline setup
set rtp+=~/.lees_hacks/bridges/powerline/bindings/vim


"
" ## Vim Theme Settings
"

syntax enable
"set t_Co=256                       " Deprecated Magic
"set term=screen-256color           " Deprecated Magic

" Because we're using Solarized, i am using iTerm2's Solarized Color palette.
" If we were not, we want to force 256 color mode for solarized. Currently
" though, we're ignoring it.
"let g:solarized_termcolors=256

" Tell Solarized to use the dark themes
set background=dark

" Set the theme to Solarized
colorscheme solarized

" I hate vim themes. I want a solid background with a visible cursor, but 
" this is causing me hell. Commenting it out for now so that i can move on
" with my life. In the future i need to figure out two things:
" 1.) How to make a solid dark gray background.
" 2.) How to make the cursor visisble during the background assignment.
"     Currently if i enter `hi Normal ctermbg=black` my cursor disappears,
"     even though *at the moment* my cursor is a bright grey cursor. Makes
"     no sense to me.
"set background=light
"highlight Normal ctermbg=234

"let &colorcolumn=join(range(81,999),",")  " Create a column at 81,82,83,etc
"highlight ColorColumn ctermbg=234         " Color the column


" Whitespace Matching
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
match ExtraWhitespace /\s\+$\| \+\ze\t/


" Vim Settings
set shell=sh                        " Set the default shell to sh, this
                                    " fixes my bash->fish in Vim.
set laststatus=2                    " Show the Airline Line

" The following two options enable 'hybrid mode'
set number                          " Show line numbers
set relativenumber                  " Show Relative numbers

set ruler                           " Show cursor position

set backupdir-=.                    " Remove current dir from the list
set backupdir+=.                    " Append it to the list (so it's checked last)
set backupdir-=~                    " Remove home, if it's in there.. not sure it is?
set backupdir^=~/.vim/tmp/bkp//     " Prepend the bkp dir. Not sure if // syntax
                                    " works with backups.
set backup                          " Turn backup on

set directory=~/.vim/tmp/swp//   	  " Keep swap files in one location.
set directory+=.                    " Add the current directory as a fallback

set tabstop=2       				        " Global tab width
set shiftwidth=2			              " Something involving tab width.
set expandtab				                " Spaces instead of tabs

set backspace=2                     " From Wiki: Make backspace work like most
                                    " other apps. In practice, it lets me
                                    " backspace through newlines on osx.

set foldmethod=indent               " Magic
set foldlevel=20                    " Magic
set foldlevelstart=20               " Magic

autocmd BufNewFile,BufRead *.md set filetype=markdown " Set md to markdown
autocmd BufNewFile,BufRead *.md setlocal textwidth=80

" CtrlP Settings

let g:ctrlp_extensions = ['line']
let g:ctrlp_show_hidden = 1         " ctrlp will grep hidden files
let g:ctrlp_custom_ignore = {
  \ 'dir': '\.git$\|node_modules$\|bower_components$\|build$',
  \ 'file': '\.exe$\|\.so$\|\.test$'
  \ }                               " Ignore groups of files.
let g:ctrlp_prompt_mappings = {
  \ 'PrtHistory(-1)': ['<c-up>'],
  \ 'PrtHistory(1)':  ['<c-down>'],
  \ 'ToggleType(1)':  ['<c-p>'],
  \ 'ToggleType(-1)': ['<c-l>'],
  \ 'PrtCurRight()':  ['<right>']
  \ }



" Chrome Specific Remaps


" General Purpose Remaps


" Maps

" Run last command
nmap <silent> <leader>1 :!!<CR>
" Check spelling
nmap <silent> <leader>s :set spell!<CR>
" Run Syntastic
nmap <leader>c :SyntasticCheck<CR>
