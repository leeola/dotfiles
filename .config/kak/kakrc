# find implements my desire for CtrlP-like fuzzy finder in kakoune.
def find -params 1 -shell-candidates %{ find . -type f -not -path "./vendor/*" -not -path "./.git/*" -not -path "./_stores/*" -not -path "./node_modules/*" } %{ edit %arg{1} }

# This binding replicates my CtrlP usage for the above command.
map global user p ":find "

# Set relative line numbers whenever a window is opened.
hook global KakBegin .* %{addhl global/ number-lines -hlcursor -separator ' ' -relative}

# Set the default colorscheme to my custom gruvbox implementation.

# See .config/kak/colors/gruvly.kak for more details.
colorscheme gruvly

# Set the default tab width
set global tabstop 2

# Make tab 2 space chars.
set global indentwidth 2

# Set a padding at the bottom of the window so i can see upcoming lines.
#
# Note that columns are also set. 3 lines, 3 columns.
set global scrolloff 3,3

# Make tab use space characters instead of tab char.
#
# Note that this just changes the tab key to indent, not specifically
# insert two spaces. Unindent is also bound.
hook global InsertChar \t %{
  exec -draft -itersel h@
}
hook global InsertKey <backspace> %{ try %{
  exec -draft hGh<a-k>\A\h+\Z<ret>gihyp<lt>
}}

# Highlight trailing whitespace
#disabled, the highlighter broke in updated version of kak.
#hook global WinCreate .* %{addhl regex '\h+$' 0:default,red}

# Enable automatic modelines for all files. Eg, to adjust settings per file.
hook global BufOpenFile .* %{modeline-parse}

# NOTE(leeola): The following window hooks seemingly need to be within a
# WinCreate hook. This may not be correct, or there may be a better way to
# implement this such as maybe making the window scope a global? Not sure.
hook global WinCreate .* %{
    hook window InsertCompletionShow .* %{
    	map window insert <tab> <c-n>
    	map window insert <backtab> <c-p>
    }

    hook window InsertCompletionHide .* %{
    	unmap window insert <tab> <c-n>
    	unmap window insert <backtab> <c-p>
    }
}

# Source custom additions, like custom user.
source ~/.config/kak/cuser.kak
source ~/.config/kak/code-err.kak
# Source my custom language specific configs.
source ~/.config/kak/go.kak
source ~/.config/kak/gotools-ext.kak

# my experimental go plugin
evaluate-commands %sh{ gokakoune-plugins }
evaluate-commands %sh{ gokakoune-examples }

# Bind the custom user mode entry point to space,  my normal leader
# the old space to , which clears selection.
map global normal , <space>
map global normal <space> :cuser-mode<ret>
